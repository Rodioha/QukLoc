import os
import telebot
import requests
from model import get_class
from config import token
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import get_nearby_places, get_place_info, find_main_place_by_partial_name

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(token)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
IMAGES_DIR = os.path.join(BASE_DIR, "images")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(IMAGES_DIR, exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ", callback_data="photo_search"),
        InlineKeyboardButton("üìç –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞", callback_data="interesting_places"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
def create_photo_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìç –ú–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏", callback_data="nearby"),
        InlineKeyboardButton("üÜï –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="new_photo"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    return keyboard

@bot.message_handler(commands=['start'])
def start_message(message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –±–æ—Ç QukLoc –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–π –ú—É—Ä–º–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üîç *–ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ* - –æ–ø—Ä–µ–¥–µ–ª—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –≤–∞—à–µ–º—É —Ñ–æ—Ç–æ\n"
        "üìç *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞* - –ø–æ–∫–∞–∂—É –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ –ö–æ–ª—å—Å–∫–æ–≥–æ –ø–æ–ª—É–æ—Å—Ç—Ä–æ–≤–∞\n"
        "‚ùì *–ü–æ–º–æ—â—å* - —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    bot.send_message(
        message.chat.id,
        welcome_text,
        parse_mode='Markdown',
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(content_types=['photo'])
def handle_docs_photo(message):
    if not message.photo:
        return bot.send_message(message.chat.id, "–í—ã –∑–∞–±—ã–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É :(")

    try:
        bot.send_message(message.chat.id, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        file_info = bot.get_file(message.photo[-1].file_id)
        file_name = file_info.file_path.split('/')[-1]
        
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_name, 'wb') as new_file:
            new_file.write(downloaded_file)

        result = get_class(model_path="./keras_model.h5", labels_path="labels.txt", image_path=file_name)
        
        bot.send_message(
            message.chat.id, 
            f"üéØ *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:* {result}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            parse_mode='Markdown',
            reply_markup=create_photo_keyboard()
        )
        
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        if call.data == "photo_search":
            bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ!")
            bot.send_message(
                call.message.chat.id,
                "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ú—É—Ä–º–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ—ë –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å!"
            )
            
        elif call.data == "interesting_places":
            bot.answer_callback_query(call.id, "–ò—â–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞...")
            bot.send_message(
                call.message.chat.id,
                "üó∫Ô∏è *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ –ú—É—Ä–º–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏:*\n\n"
                "–í–æ–¥–æ–ø–∞–¥ –ë–æ–ª—å—à–æ–π –Ø–Ω–∏—Å–∫–µ–Ω–≥–∞—Å\n"
                "–ö–∞–Ω–¥–∞–ª–∞–∫—à–∞ –∏ –û–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏\n"
                "–¢–µ—Ä—Å–∫–∏–π –ë–µ—Ä–µ–≥\n"
                "–õ–∞–ø–ª–∞–Ω–¥—Å–∫–∏–π –ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫\n"
                "–•–∏–±–∏–Ω—ã –∏ –≥–æ—Ä–æ–¥ –ö–∏—Ä–æ–≤—Å–∫\n"
                "–õ–æ–≤–æ–∑–µ—Ä—Å–∫–∏–µ –¢—É–Ω–¥—Ä—ã –∏ –°–µ–π–¥–æ–∑–µ—Ä–æ\n"
                "–ú—É—Ä–º–∞–Ω—Å–∫\n"
                "–¢–µ—Ä–∏–±–µ—Ä–∫–∞\n"
                "–û—Å—Ç—Ä–æ–≤ –ö–∏–ª—å–¥–∏–Ω\n"
                "–ü–æ–ª—É–æ—Å—Ç—Ä–æ–≤ –†—ã–±–∞—á–∏–π\n"
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ",
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
            
        elif call.data == "help":
            bot.answer_callback_query(call.id, "–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É")
            help_text = (
                "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º QukLoc:*\n\n"
                "1. *–ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ* - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ú—É—Ä–º–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏\n"
                "2. *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞* - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ –ö–æ–ª—å—Å–∫–æ–≥–æ –ø–æ–ª—É–æ—Å—Ç—Ä–æ–≤–∞\n"
                "3. *–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ* –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
            )
            bot.send_message(
                call.message.chat.id,
                help_text,
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
            
        elif call.data == "nearby":
            bot.answer_callback_query(call.id, "–ò—â–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞...")
            
            previous_message = call.message.text
            if "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:" in previous_message:
                current_place = previous_message.split("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")[1].strip().split(" (")[0]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
                full_place_name = find_main_place_by_partial_name(current_place)
                if full_place_name:
                    current_place = full_place_name
            else:
                current_place = "–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database.py
            places = get_nearby_places(current_place)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞
            keyboard = InlineKeyboardMarkup(row_width=1)
            for place in places:
                keyboard.add(InlineKeyboardButton(f"üìç {place['name']}", callback_data=f"place_{place['name']}"))
            
            keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_photo"))
            
            bot.send_message(
                call.message.chat.id,
                f"üèõÔ∏è *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º:*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
                   
        elif call.data == "new_photo":
            bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ")
            bot.send_message(
                call.message.chat.id,
                "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                "–Ø –æ–ø—Ä–µ–¥–µ–ª—é –æ–±—ä–µ–∫—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.",
                reply_markup=create_photo_keyboard()
            )
            
        elif call.data.startswith("place_"):
            bot.answer_callback_query(call.id, "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
            
            place_name = call.data.replace("place_", "")
            place_info = get_place_info(place_name)
            
            photo_path = place_info.get("photo")
            photo_sent = False
            
            if photo_path:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
                if photo_path.startswith("../"):
                    relative_path = photo_path[3:]  # –£–±–∏—Ä–∞–µ–º ../
                    absolute_photo_path = os.path.join(BASE_DIR, relative_path)
                else:
                    absolute_photo_path = os.path.join(IMAGES_DIR, photo_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if os.path.exists(absolute_photo_path):
                    try:
                        with open(absolute_photo_path, 'rb') as photo_file:
                            bot.send_photo(
                                call.message.chat.id,
                                photo_file,
                                caption=f"üèõÔ∏è *{place_info['name']}*\n\n{place_info['description']}",
                                parse_mode='Markdown'
                            )
                            photo_sent = True
                    except Exception as file_error:
                        # –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {str(file_error)}"
                        bot.send_message(
                            call.message.chat.id,
                            f"üèõÔ∏è *{place_info['name']}*\n\n{place_info['description']}\n\n{error_msg}",
                            parse_mode='Markdown'
                        )
                else:
                    # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    bot.send_message(
                        call.message.chat.id,
                        f"üèõÔ∏è *{place_info['name']}*\n\n{place_info['description']}\n\n"
                        f"‚ùå –§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
                        f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: `{absolute_photo_path}`",
                        parse_mode='Markdown'
                    )
            
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            if not photo_sent:
                bot.send_message(
                    call.message.chat.id,
                    f"üèõÔ∏è *{place_info['name']}*\n\n{place_info['description']}",
                    parse_mode='Markdown'
                )
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(

                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_photo")
            )
            
            bot.send_message(
                call.message.chat.id,
                "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=keyboard
            )
            
        elif call.data.startswith("info_"):
            place_name = call.data.replace("info_", "")
            place_info = get_place_info(place_name)
            
            facts_text = (
                f"üìö *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {place_info['name']}:*\n\n"
                f"{place_info['description']}\n\n"
                f"*–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞:*\n"
                f"–ú–µ—Å—Ç–æ –∏–º–µ–µ—Ç –±–æ–≥–∞—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ú—É—Ä–º–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏."
            )
            
            bot.send_message(
                call.message.chat.id,
                facts_text,
                parse_mode='Markdown',
                reply_markup=create_photo_keyboard()
            )
            
        elif call.data == "back_to_photo":
            bot.answer_callback_query(call.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è")
            bot.send_message(
                call.message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_photo_keyboard()
            )
            
        elif call.data == "back_to_main":
            bot.answer_callback_query(call.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            bot.send_message(
                call.message.chat.id,
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=create_main_keyboard()
            )
                
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        bot.send_message(
            call.message.chat.id,
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞:*\n\n`{str(e)}`\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            parse_mode='Markdown'
        )

if __name__ == "__main__":
    print("–ë–æ—Ç QukLoc –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)